## Node modules
    - Internos: Que é desenvolvido pelo dev
    - Core: que vem na base do Node
    - Externos: instalados via NPM

## Core modules
    - Http: para criar servidores Http
        - createServer
        - listen
        - statusCode
        - end
    - URL: modulo para trabalhar com URL
        - parse (host, path, search, query, etc)

    - Fs: File System, leitura e escrita de arquivos
        - WriteFile (CREATE)
        - Rename (UPADTE)
        - AppendFile (UPDATE)
        - Unlink (DELETE)

    - Path: extrai informações de path de arquivos
        - resolve: saber o caminho completo
        - join: path dinamico, com var e valor fixo
    
    - ModuleOS - Extrai info do sistema

## NPM
    - init: cria npm's locais (utilizar -y para criação rápida)
    - install: instala modulos externos
    - save-dev: instala apenas para desenvolvimento
    - npm update: atualiza modulo (npx npm-check-updates)
    - script: cria rotinas no package.json (test, start, serve)

## Template Engine - Express
    - Render: usa-se o '{{}}' como parametro, alterando apenas a view
    - If: é necessário usar {{#if nomeVar}} com fechamento de tags, para validar corretamente
        - o else funciona no mesmo sentido, utilizando {{else}} como condicional
    - Loops: utiliza-se o {{each}} ou o {{this}} para tratar arrays
    - Abstração: utiliza-se o {{with Object}}, sem a necessidade de repetir a variavel (var.nomeObjeto)

## Sequelize 
    - ORM: Object Relational Mapper
    - Abstrai as queries, para facilitar as useCases
    - Baseada em promises (then, catch)
    - precisa sempre criar uma Model
    - o metodo sync faz a criação das tables baseada na model
    - o metodo where é aplicado diretamente no codigo, servindo como constraint direta

